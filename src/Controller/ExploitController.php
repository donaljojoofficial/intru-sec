<?php

namespace App\Controller;

use App\Entity\Exploit;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\JsonResponse;


class ExploitController extends AbstractController
{
    #[Route('/', name: 'homepage', methods: ['GET'])]
public function index(): Response
{
    return $this->render('exploit/detect.html.twig');
}
 #[Route('/detect', name: 'detect_exploit', methods: ['POST'])]
    //public function detect(Request $request, EntityManagerInterface $em): JsonResponse
    public function detect(Request $request, EntityManagerInterface $em): JsonResponse
    {
        $url = $request->request->get('url', '');

        if (empty($url)) {
            return $this->json([
                'error' => 'URL parameter is required',
            ], 400);
        }

        $detectedTypes = $this->detectExploits($url);

        foreach ($detectedTypes as $type) {
            $exploit = new Exploit();
            $exploit->setUrl($url);
            $exploit->setType($type);
            $exploit->setDetectedAt(new \DateTimeImmutable());

            $em->persist($exploit);
        }
        $em->flush();

        return $this->json([
            'message' => 'Scan completed',
            'detectedTypes' => $detectedTypes,
        ]);
    }

    private function detectExploits(string $input): array
    {
        $patterns = [
            'SQL Injection'  => '/(\%27)|(\')|(\-\-)|(\%23)|(#)|(\bSELECT\b|\bINSERT\b|\bUPDATE\b|\bDELETE\b)/i',
            'Cross-Site Scripting (XSS)' => '/(<script>|%3Cscript%3E|onerror=|onload=)/i',
            'Command Injection' => '/(;|\|\||&\&|\$\(.*\)|`.*`)/i',
            'Local File Inclusion' => '/(php:\/\/input|php:\/\/filter|etc\/passwd|\/etc\/passwd)/i',
            'Remote File Inclusion' => '/(http:\/\/|https:\/\/).*\.(php|phtml|php3)/i',
        ];

        $found = [];

        foreach ($patterns as $type => $pattern) {
            if (preg_match($pattern, $input)) {
                $found[] = $type;
            }
        }

        return !empty($found) ? $found : ['Safe'];
    }
#[Route('/history', name: 'exploit_history', methods: ['GET'])]
public function history(EntityManagerInterface $em): Response
{
    $exploits = $em->getRepository(Exploit::class)->findAll();
    return $this->render('exploit/history.html.twig', [
        'exploits' => $exploits,
    ]);
}

private function improvedDetect(string $url): array
{
    $patterns = [
        'SQL Injection' => '/(\%27)|(\')|(\-\-)|(\%23)|(#)/i',
        'XSS' => '/((<|%3C)script)/i',
        'Command Injection' => '/(;|\|\||&\&)/',
        'File Inclusion' => '/(php:\/\/input|php\:\/\/filter)/i'
    ];

    $detected = [];

    foreach ($patterns as $type => $pattern) {
        if (preg_match($pattern, $url)) {
            $detected[] = $type;
        }
    }
    return $detected ?: ['Safe'];
}
#[Route('/export', name: 'export_exploits', methods: ['GET'])]
public function export(EntityManagerInterface $em): Response
{
    $exploits = $em->getRepository(Exploit::class)->findAll();

    $csvContent = "ID,URL,Type,Detected At\n";
    foreach ($exploits as $exploit) {
        $csvContent .= sprintf(
          "%d,\"%s\",\"%s\",\"%s\"\n",
          $exploit->getId(),
          $exploit->getUrl(),
          $exploit->getType(),
          $exploit->getDetectedAt()->format('Y-m-d H:i:s')
        );
    }

    return new Response($csvContent, 200, [
        'Content-Type' => 'text/csv',
        'Content-Disposition' => 'attachment; filename="scan_history.csv"'
    ]);
}

   
}
